1、doGetBean
2、getSingleton
3、getObjectForBeanInstance
4、getMergedLocalBeanDefinition
5、getBeanDefinition
6、getObjectFromFactoryBean()
7、doGetObjectFromFactoryBean()
8、postProcessObjectFromFactoryBean
9、getSingleton(String beanName, ObjectFactory<?> singletonFactory)





protected <T > T doGetBean( final String name, final Class<T> requiredType, final Object[] args,
        boolean typeCheckOnly)throws BeansException {
 	/**
 	* 转换对应的beanName 你们可能认为传入进来的name 不就是beanName么？
	 * 传入进来的可能是别名,也有可能是是factoryBean
	 * 1）去除factoryBean的修饰符 name="&instA"=====>instA
	 * 2)  取指定的alias所表示的最终beanName 比如传入的是别名为ia---->指向为instA的bean， 那么就返回instA
	 **/
            final String beanName = transformedBeanName(name);
            Object bean;
	/**
 	* 设计的精髓
 	* 检查实例缓存中对象工厂缓存中是包含对象(从这里返回的可能是实例话好的,也有可能是没有实例化好的)
 	* 为什么要这段代码?
	 * 因为单实例bean创建可能存在依赖注入的情况， 而为了解决循环依赖问题， 在对象刚刚创建好(属性还没有赋值)
 	* 的时候， 就会把对象包装为一个对象工厂暴露出去(加入到对象工厂缓存中),一但下一个bean要依赖他， 就直接可以从缓存中获取.
	* */
	//直接从缓存中获取或者从对象工厂缓存去取。
            Object sharedInstance = getSingleton(beanName);
            if (sharedInstance != null && args == null) {
                if (logger.isDebugEnabled()) {
                    if (isSingletonCurrentlyInCreation(beanName)) {
                        logger.debug("Returning eagerly cached instance of singleton bean '" + beanName +
                                "' that is not fully initialized yet - a consequence of a circular reference");
                    }
                    else {
                        logger.debug("Returning cached instance of singleton bean '" + beanName + "'");
                    }
                }
	  /***若从缓存中的sharedInstance是原始的bean(属性还没有进行实例化, 那么在这里进行处理)
                   * 或者是factoryBean 返回的是工厂bean的而不是我们想要的getObject() 返回的bean, 就会在这里处理
                   **/
                bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);
            } else {
	/**
 	* 为什么spring对原型对象就不能解决循环依赖的问题了？
 	* 因为spring ioc对原型对象不进行缓存,所以无法提前暴露对象,每次调用都会创建新的对象.
 	*
	 比如对象A中的属性对象B,对象B中有属性A, 在创建A的时候 检查到依赖对象B， 那么就会返过来创建对象B， 在创建B的过程
	 * 又发现依赖对象A,由于是原型对象的， ioc容器是不会对实例进行缓存的 所以无法解决循环依赖的问题
	 *
	 */
                if (isPrototypeCurrentlyInCreation(beanName)) {
                    throw new BeanCurrentlyInCreationException(beanName);
                }/
	//获取父容器
                BeanFactory parentBeanFactory = getParentBeanFactory();
	//如果beanDefinitionMap中所有以及加载的bean不包含 本次加载的beanName， 那么尝试取父容器取检测
                if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {
	    // Not found -> check parent.
                    String nameToLookup = originalBeanName(name);
                    if (args != null) {
	        //父容器递归查询
                        return (T) parentBeanFactory.getBean(nameToLookup, args);
                    }
                    else {
	       // No args -> delegate to standard getBean method.
                        return parentBeanFactory.getBean(nameToLookup, requiredType);
                    }
                }
	//如果这里不是做类型检查， 而是创建bean,这里需要标记一下.
                if (!typeCheckOnly) {
                    markBeanAsCreated(beanName);
                }
                try {
	/**
	 合并父 BeanDefinition 与子 BeanDefinition， 后面会单独分析这个方法
	 *
	 */
                    final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
                    checkMergedBeanDefinition(mbd, beanName, args);
	//用来处理bean加载的顺序依赖 比如要创建instA 的情况下 必须需要先创建instB
	/**
 	* <bean id="beanA" class="BeanA" depends-on="beanB">
 	<bean id="beanB" class="BeanB" depends-on="beanA">
 	创建A之前 需要创建B 创建B之前需要创建A 就会抛出异常
	 * */
                    String[] dependsOn = mbd.getDependsOn();
                    if (dependsOn != null) {
                        for (String dep : dependsOn) {
                            if (isDependent(beanName, dep)) {
                                throw new BeanCreationException(mbd.getResourceDescription(), beanName,
                                        "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
                            }
	           //注册依赖
                            registerDependentBean(dep, beanName);
                            try {
	                //优先创建依赖的对象
                                getBean(dep);
                            } catch(NoSuchBeanDefinitionException ex) {
                                throw new BeanCreationException(mbd.getResourceDescription(), beanName,
                                        "'" + beanName + "' depends on missing bean '" + dep + "'", ex);
                            }
                        }
                    }
	   //创建bean（单例的 ）
                    if (mbd.isSingleton()) {
	        //创建单实例bean
                        sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {
                            //在getSingleton房中进行回调用的
                            @Override
                            public Object getObject() throws BeansException {
                                try {
                                    return createBean(beanName, mbd, args);
                                } catch(BeansException ex) {
		// Explicitly remove instance from singleton cache: It might have been put there
		// eagerly by the creation process, to allow for circular reference resolution.
		// Also remove any beans that received a temporary reference to the bean.
                                    destroySingleton(beanName);
                                    throw ex;
                                }
                            }
                        });
                        bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
                    }
	    //创建非单实例bean
                    else if (mbd.isPrototype()) {
 	         // It's a prototype -> create a new instance.
                        Object prototypeInstance = null;
                        try {
                            beforePrototypeCreation(beanName);
                            prototypeInstance = createBean(beanName, mbd, args);
                        } finally {
                            afterPrototypeCreation(beanName);
                        }
		bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
                    } else {
                        String scopeName = mbd.getScope();
                        final Scope scope = this.scopes.get(scopeName);
                        if (scope == null) {
                            throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
                        }
                        try {
                            Object scopedInstance = scope.get(beanName, new ObjectFactory<Object>() {
                                @Override
                                public Object getObject() throws BeansException {
                                    beforePrototypeCreation(beanName);
                                    try {
                                        return createBean(beanName, mbd, args);
                                    } f
                                    inally {
                                        afterPrototypeCreation(beanName);
                                    }
                                }
                            });
                            bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                        } c
                        atch(IllegalStateException ex) {
                            throw new BeanCreationException(beanName,
                                    "Scope '" + scopeName + "' is not active for the current thread; consider " +
                                            "defining a scoped proxy for this bean if you intend to refer to it from a singleton",
                                    ex);
                        }
                    }
                } catch(BeansException ex) {
                    cleanupAfterBeanCreationFailure(beanName);
                    throw ex;
                }
            }
	//Check if required type matches the type of the actual bean instance.
            if (requiredType != null && bean != null && !requiredType.isInstance(bean)) {
                try {
                    return getTypeConverter().convertIfNecessary(bean, requiredType);
                } c
                atch(TypeMismatchException ex) {
                    if (logger.isDebugEnabled()) {
                        logger.debug("Failed to convert bean '" + name + "' to required type '" +
                                ClassUtils.getQualifiedName(requiredType) + "'", ex);
                    }
                    t
                    hrow new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
                }
            } return(T) bean;
        }

2、=========================================================================================================================

         protected Object getSingleton(String beanName, boolean allowEarlyReference) {
	//去缓存map中获取以及实例化好的bean对象
            Object singletonObject = this.singletonObjects.get(beanName);
	//缓存中没有获取到,并且当前bean是否在正在创建
            if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {
	//加锁， 防止并发创建
                synchronized (this.singletonObjects) {
	    //保存早期对象缓存中是否有该对象
                    singletonObject = this.earlySingletonObjects.get(beanName);
	    //早期对象缓存没有
                    if (singletonObject == null && allowEarlyReference) {
	        //早期对象暴露工厂缓存(用来解决循环依赖的)
                        ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);
                        if (singletonFactory != null) {
	             //调用方法获早期对象
                            singletonObject = singletonFactory.getObject();
	             //放入到早期对象缓存中
                            this.earlySingletonObjects.put(beanName, singletonObject);
                            this.singletonFactories.remove(beanName);
                        }
                    }
                }
            }
	return (singletonObject != NULL_OBJECT ? singletonObject : null);
        }


3、getObjectForBeanInstance-===================================================================================================================================
在Bean的生命周期中， getObjectForBeanInstance方法是频繁使用的方法， 无论是从缓存中获取出来的bean还是
根据scope创建出来的bean,都要通过该方法进行检查。
①:检查当前bean是否为factoryBean,如果是就需要调用该对象的getObject()方法来返回我们需要的bean对象

protected Object getObjectForBeanInstance(
            Object beanInstance, String name, String beanName, RootBeanDefinition mbd) {
        //判断name为以 &开头的但是 又不是factoryBean类型的 就抛出异常
        if (BeanFactoryUtils.isFactoryDereference(name) && !(beanInstance instanceof FactoryBean)) {
            throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());
        }    /
             **
             * 现在我们有了这个bean， 它可能是一个普通bean 也有可能是工厂bean
             * 1 )若是工厂bean， 我们使用他来创建实例， 当如果想要获取的是工厂实例而不是工厂bean的getObject()对应的bean,我们应该传入&开头
                * */
	// Now we have the bean instance, which may be a normal bean or a FactoryBean.
	// If it's a FactoryBean, we use it to create a bean instance, unless the
	// caller actually wants a reference to the factory.
        if (!(beanInstance instanceof FactoryBean) | | BeanFactoryUtils.isFactoryDereference(name)) {
            return beanInstance;
        }
        //加载factoryBean
        Object object = null;
        if (mbd == null) {
            /*
             * 如果 mbd 为空， 则从缓存中加载 bean。 FactoryBean 生成的单例 bean 会被缓存
             * 在 factoryBeanObjectCache 集合中， 不用每次都创建
             */
            object = getCachedObjectForFactoryBean(beanName);
        }
        if (object == null) {
            // 经过前面的判断， 到这里可以保证 beanInstance 是 FactoryBean 类型的， 所以可以进行类型转换
            FactoryBean<?> factory = (FactoryBean<?>) beanInstance;
            // 如果 mbd 为空， 则判断是否存在名字为 beanName 的 BeanDefinition
            if (mbd == null && containsBeanDefinition(beanName)) {
                 //合并我们的bean定义
                mbd = getMergedLocalBeanDefinition(beanName);
            }
            boolean synthetic = (mbd != null && mbd.isSynthetic());
            // 调用 getObjectFromFactoryBean 方法继续获取实例
            object = getObjectFromFactoryBean(factory, beanName, !synthetic);
        }
        return object;
    }

4、getMergedLocalBeanDefinition 将bean定义转为RootBeanDifination合并父子bean定义=============================================================================================
<bean id="tulingParentCompent" class="com.tuling.testparentsonbean.TulingParentCompent" abstract="true">
<property name="tulingCompent" ref="tulingCompent"></property>
</bean>
<bean id="tulingSonCompent" class="com.tuling.testparentsonbean.TulingSonCompent" parent="tulingParentCompent"></bean>
<bean id="tulingLog" class="com.tuling.testcreatebeaninst.TulingLog"></bean>
    protected RootBeanDefinition getMergedLocalBeanDefinition(String beanName) throws BeansException {
//去合并的bean定义缓存中 判断当前的bean是否合并过
        RootBeanDefinition mbd = this.mergedBeanDefinitions.get(beanName);
        if (mbd != null) {
            return mbd;
        }
//没有合并， 调用合并分方法
        return getMergedBeanDefinition(beanName, getBeanDefinition(beanName));
    }
    根据beanName获取到当前的bean定义信息

5、getBeanDefinition  方法中的参数方法=========================================================================================================================
    
    @Override
    public BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException {
        BeanDefinition bd = this.beanDefinitionMap.get(beanName);
        if (bd == null) {
            if (logger.isTraceEnabled()) {
                logger.trace("No bean named '" + beanName + "' found in " + this);
            }t
            hrow new NoSuchBeanDefinitionException(beanName);
        }
       return bd;
    }

    protected RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd)
            throws BeanDefinitionStoreException {
        return getMergedBeanDefinition(beanName, bd, null);
    }
   
 protected RootBeanDefinition getMergedBeanDefinition(
            String beanName, BeanDefinition bd, BeanDefinition containingBd)
            throws BeanDefinitionStoreException {
        synchronized (this.mergedBeanDefinitions) {
            RootBeanDefinition mbd = null;
	//去缓存中获取一次bean定义
            if (containingBd == null) {
                mbd = this.mergedBeanDefinitions.get(beanName);
            }
	//尝试没有获取到
            if (mbd == null) {
	//当前bean定义是否有父bean
                if (bd.getParentName() == null) { //没有
	    //转为rootBeanDefinaition 然后深度克隆返回
                    if (bd instanceof RootBeanDefinition) {
                        mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();
                    }else {
                        mbd = new RootBeanDefinition(bd);
                    }
                }
                else { //有父bean定义一个父的bean定义
	    // Child bean definition: needs to be merged with parent.
                    BeanDefinition pbd;
                    try {
	        //获取父bean的名称
                        String parentBeanName = transformedBeanName(bd.getParentName());
	/** 判断父类 beanName 与子类 beanName 名称是否相同。 若相同， 则父类 bean 一定
	 * 在父容器中。 原因也很简单， 容器底层是用 Map 缓存 <beanName, bean> 键值对
 	* 的。 同一个容器下， 使用同一个 beanName 映射两个 bean 实例显然是不合适的。
	 * 有的朋友可能会觉得可以这样存储： <beanName, [bean1 , bean2]> ， 似乎解决了
	 * 一对多的问题。 但是也有问题， 调用 getName(beanName) 时， 到底返回哪个 bean
	 * 实例好呢？
 	*/
                        if (!beanName.equals(parentBeanName)) {
                            /*
                             * 这里再次调用 getMergedBeanDefinition， 只不过参数值变为了
                             * parentBeanName， 用于合并父 BeanDefinition 和爷爷辈的
                             * BeanDefinition。 如果爷爷辈的 BeanDefinition 仍有父
                             * BeanDefinition， 则继续合并
                             */
                            pbd = getMergedBeanDefinition(parentBeanName);
                        }else {
		//获取父容器
                            BeanFactory parent = getParentBeanFactory();
                            if (parent instanceof ConfigurableBeanFactory) {
		//从父容器获取父bean的定义 //若父bean中有父bean 存储递归合并
                                pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);
                            }else {
                                throw new NoSuchBeanDefinitionException(parentBeanName,
                                        "Parent name '" + parentBeanName + "' is equal to bean name '" + beanName +
                                                "': cannot be resolved without an AbstractBeanFactory parent");
                            }
                        }
                    }catch (NoSuchBeanDefinitionException ex) {
                        throw new BeanDefinitionStoreException(bd.getResourceDescription(), beanName,
                                "Could not resolve parent bean definition '" + bd.getParentName() + "'", ex);
                    }/
	/以父 BeanDefinition 的配置信息为蓝本创建 RootBeanDefinition， 也就是“已合并的 BeanDefinition”
                    mbd = new RootBeanDefinition(pbd);
	//用子 BeanDefinition 中的属性覆盖父 BeanDefinition 中的属性
                    mbd.overrideFrom(bd);
                }/
	/若之前没有定义,就把当前的设置为单例的
                if (!StringUtils.hasLength(mbd.getScope())) {
                    mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);
                }/
	/ A bean contained in a non-singleton bean cannot be a singleton itself.
	// Let's correct this on the fly here, since this might be the result of
	// parent-child merging for the outer bean, in which case the original inner bean
	// definition will not have inherited the merged outer bean's singleton status.
                if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {
                    mbd.setScope(containingBd.getScope());
                }/
	/ 缓存合并后的 BeanDefinition
	// Cache the merged bean definition for the time being
	// (it might still get re-merged later on in order to pick up metadata changes)
                if (containingBd == null && isCacheBeanMetadata()) {
                    this.mergedBeanDefinitions.put(beanName, mbd);
                }
            }
            return mbd;
        }
    }


        

6、getObjectFromFactoryBean()=============================================================================================
   
   protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {
        /*
         * FactoryBean 也有单例和非单例之分， 针对不同类型的 FactoryBean， 这里有两种处理方式：
         * 1 . 单例 FactoryBean 生成的 bean 实例也认为是单例类型。 需放入缓存中， 供后续重复使用
         * 2. 非单例 FactoryBean 生成的 bean 实例则不会被放入缓存中， 每次都会创建新的实例
         */
        if (factory.isSingleton() && containsSingleton(beanName)) {
            //加锁， 防止重复创建 可以使用缓存提高性能
            synchronized (getSingletonMutex()) {
                //从缓存中获取
                Object object = this.factoryBeanObjectCache.get(beanName);
                if (object == null) {
                    //没有获取到， 使用factoryBean的getObject（） 方法去获取对象
                    object = doGetObjectFromFactoryBean(factory, beanName);
                    Object alreadyThere = this.factoryBeanObjectCache.get(beanName);
                    if (alreadyThere != null) {
                        object = alreadyThere;
                    }else {
                        if (object != null && shouldPostProcess) {
 	            //判断bean是否正在创建
                            if (isSingletonCurrentlyInCreation(beanName)) {
		// Temporarily return non-post-processed object, not storing it yet..
                                return object;
                            }
                            beforeSingletonCreation(beanName);
                            try {
		//调用ObjectFactory的后置处理器
                                object = postProcessObjectFromFactoryBean(object, beanName);
                            }catch (Throwable ex) {
                                throw new BeanCreationException(beanName,
                                        "Post-processing of FactoryBean's singleton object failed", ex);
                            }finally {
                                afterSingletonCreation(beanName);
                            }
                        }
                        if (containsSingleton(beanName)) {
                            this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT));
                        }
                    }
                }
                return (object != NULL_OBJECT ? object : null);
            }
        }else {
            Object object = doGetObjectFromFactoryBean(factory, beanName);
            if (object != null && shouldPostProcess) {
                try {
                    object = postProcessObjectFromFactoryBean(object, beanName);
                }catch (Throwable ex) {
                    throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex);
                }
            }
            return object;
        }
    }


7、doGetObjectFromFactoryBean()=========================================================================================
    private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)
            throws BeanCreationException {
        Object object;
        try {
	//安全检查
            if (System.getSecurityManager() != null) {
                AccessControlContext acc = getAccessControlContext();
                try {
                    object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
                        @Override
                        public Object run() throws Exception {
	            //调用工厂bean的getObject()方法
                            return factory.getObject();
                        }
                    }, acc);
                }catch (PrivilegedActionException pae) {
                    throw pae.getException();
                }
            }else {
	//调用工厂bean的getObject()方法
                object = factory.getObject();
            }
        }catch (FactoryBeanNotInitializedException ex) {
            throw new BeanCurrentlyInCreationException(beanName, ex.toString());
        }catch (Throwable ex) {
            throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex);
        }
        if (object == null && isSingletonCurrentlyInCreation(beanName)) {
            throw new BeanCurrentlyInCreationException(
                    beanName, "FactoryBean which is currently in creation returned null from getObject");
        }
        return object;
    }

8、postProcessObjectFromFactoryBean（）在类  AbstractAutowireCapableBeanFactory==========================================================================
@Override
public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)
throws BeansException {
Object result = existingBean;
for (BeanPostProcessor processor : getBeanPostProcessors()) {
result = processor.postProcessAfterInitialization(result, beanName);
if (result == null) {
return result;
}
}
return result;
}

9、getSingleton(String beanName, ObjectFactory<?> singletonFactory)============================================================================================
  
   public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {
        Assert.notNull(beanName, "'beanName' must not be null");
        synchronized (this.singletonObjects) {
             //从缓存中获取对象
            Object singletonObject = this.singletonObjects.get(beanName);
            if (singletonObject == null) {
	//如果当前的bean正在销毁，则直接抛出异常
                if (this.singletonsCurrentlyInDestruction) {
                    throw new BeanCreationNotAllowedException(beanName,
                            "Singleton bean creation not allowed while singletons of this factory are in destruction " +
                                    "(Do not request a bean from a BeanFactory in a destroy method implementation!)");
                }i
                f (logger.isDebugEnabled()) {
                    logger.debug("Creating shared instance of singleton bean '" + beanName + "'");
                }/
	/打标.....把正在创建的bean 的标识设置为ture 
                beforeSingletonCreation(beanName);
                boolean newSingleton = false;
                boolean recordSuppressedExceptions = (this.suppressedExceptions == null);
                if (recordSuppressedExceptions) {
                    this.suppressedExceptions = new LinkedHashSet<Exception>();
                }t
                ry {
	    //调用单实例bean的创建
                    singletonObject = singletonFactory.getObject();
                    newSingleton = true;
                }catch (IllegalStateException ex) {
	     // Has the singleton object implicitly appeared in the meantime ->
	    // if yes, proceed with it since the exception indicates that state.
                    singletonObject = this.singletonObjects.get(beanName);
                    if (singletonObject == null) {
                        throw ex;
                    }
                }catch (BeanCreationException ex) {
                    if (recordSuppressedExceptions) {
                        for (Exception suppressedException : this.suppressedExceptions) {
                            ex.addRelatedCause(suppressedException);
                        }
                    }
                    throw ex;
                }
	finally {
                    if (recordSuppressedExceptions) {
                        this.suppressedExceptions = null;
                    }a
                    fterSingletonCreation(beanName);
                }
                if (newSingleton) {
                    //加载到缓存中
                    addSingleton(beanName, singletonObject);
                }
            }
            return (singletonObject != NULL_OBJECT ? singletonObject : null);
        }
    }
=========================singletonObject = singletonFactory.getObject()=======================>createBean的过程
            sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {
        @Override
        public Object getObject() throws BeansException {
            try {
                return createBean(beanName, mbd, args);
            }
            catch (BeansException ex) {
// Explicitly remove instance from singleton cache: It might have been put there
// eagerly by the creation process, to allow for circular reference resolution.
// Also remove any beans that received a temporary reference to the bean.
                destroySingleton(beanName);
                throw ex;
            }
        }
    });
==============================================addSingleton(beanName, singletonObject);=================
    protected void addSingleton(String beanName, Object singletonObject) {
        synchronized (this.singletonObjects) {
//加入到缓存
            this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));
//从早期对象缓存和解决依赖缓存中移除..................
            this.singletonFactories.remove(beanName);
            this.earlySingletonObjects.remove(beanName);
            this.registeredSingletons.add(beanName);
        }
    }



